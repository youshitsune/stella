#!/usr/bin/python3
import os
import sys
import random
import pyttsx3
import speech_recognition as sr
import json
from collections import defaultdict
from gensim import corpora
from gensim import models
from gensim import similarities
import pyautogui
from time import sleep

engine = pyttsx3.init()
recognizer = sr.Recognizer()

def speak(text):
    engine.say(text)
    engine.runAndWait()

def listen():
    os.system("arecord -d 5 -f cd --file-type wav audio.wav")
    with sr.AudioFile("audio.wav") as source:
        recognizer.adjust_for_ambient_noise(source)
        data = recognizer.record(source)
    os.remove("audio.wav")
    ctx = json.loads(recognizer.recognize_vosk(data))
    print(ctx["text"])
    return ctx["text"]

def win(commands):
    pyautogui.keyDown("win")
    for i in commands:
        pyautogui.press(str(i))
    pyautogui.keyUp("win")

def rick():
    with open("/home/luka/Science/rick.txt", "r") as f:
        rick = f.read().split(";")
    quote = random.choice(rick)
    speak(quote)

def play_music():
    win([9, "s"])
    pyautogui.write("st cmus")
    pyautogui.press("enter")
    sleep(1)
    pyautogui.press("enter")
    win([1])
    speak("Okay, I'm playing your music.")

def pause_music():
    win([9])
    pyautogui.press("c")
    win([1])
    speak("I have paused your music.")

def list_projects_names():
    with open("projects.txt", "r") as f:
        projects = f.read().split(";")
    
    projects_names = []
    for i in projects:
        projects_names.append(i.split(":")[0])

    speak(f"Your projects are: {','.join(projects_names)}")

def list_projects_status():
    with open("projects.txt", "r") as f:
        projects = f.read().split(";")

    for i in range(len(projects)):
        name = projects[i].split(":")[0]
        status = projects[i].split(":")[1]

        projects[i] = f"{name} is {status}"

    speak(f"Statuses of your projects are: {','.join(projects)}")

documents = [
        "Empty",
        "Play music",
        "Play my favorite music",
        "Play a playlist",
        "Tell me Rick stuff",
        "Rick",
        "Rick quotes",
        "List my projects",
        "Tell me mine projects",
        "Say me projects",
        "List project status",
        "Tell me project status",
        "Say me project status",
        "Stop my music",
        "Stop music",
        "Stop playing music"
]

stoplist = set('for a of the and to in'.split())
texts = [
        [word for word in document.lower().split() if word not in stoplist]
        for document in documents
]

frequency = defaultdict(int)
for text in texts:
    for token in text:
        frequency[token] += 1

texts = [
    [token for token in text if frequency[token] > 1]
    for text in texts
]

dictionary = corpora.Dictionary(texts)
corpus = [dictionary.doc2bow(text) for text in texts]

lsi = models.LsiModel(corpus, id2word=dictionary, num_topics=2)

doc = listen()
vec_bow = dictionary.doc2bow(doc.lower().split())
vec_lsi = lsi[vec_bow]

index = similarities.MatrixSimilarity(lsi[corpus])

index.save("stella.index")
index = similarities.MatrixSimilarity.load("stella.index")

sims = index[vec_lsi]

n = list(enumerate(sims))

n.sort(reverse=True, key=lambda x: x[1])

if n[0][0] in [1, 2, 3]:
    play_music()
elif n[0][0] in [4,5,6]:
    rick()
elif n[0][0] in [7,8,9]:
    list_projects_names()
elif n[0][0] in [10, 11, 12]:
    list_projects_status()
elif n[0][0] in [13, 14, 15]:
    pause_music()
else:
    ask_ai(doc)
