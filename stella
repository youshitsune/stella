#!/usr/bin/python3
import os
import sys
import random
import pyttsx3
import speech_recognition as sr
import json
from collections import defaultdict
from gensim import corpora
from gensim import models
from gensim import similarities
import pyautogui
from time import sleep
from transformers import AutoModelForSeq2SeqLM, AutoTokenizer

engine = pyttsx3.init()
recognizer = sr.Recognizer()
model = None
tokenizer = None

def speak(text):
    engine.say(text)
    engine.runAndWait()

def listen():
    os.system("arecord -d 5 -f cd --file-type wav audio.wav")
    with sr.AudioFile("audio.wav") as source:
        recognizer.adjust_for_ambient_noise(source)
        data = recognizer.record(source)
    os.remove("audio.wav")
    ctx = json.loads(recognizer.recognize_vosk(data))
    print(ctx["text"])
    return ctx["text"]

def ai(ctx):
    global model, tokenizer
    if model and tokenizer:
        input_ids = tokenizer(ctx, return_tensors="pt").input_ids
        speak(tokenizer.decode(model.generate(input_ids)[0], skip_special_tokens=True))
    else:
        model = AutoModelForSeq2SeqLM.from_pretrained("google/t5-small-ssm-nq")
        tokenizer = AutoTokenizer.from_pretrained("google/t5-small-ssm-nq")
        input_ids = tokenizer(ctx, return_tensors="pt").input_ids
        speak(tokenizer.decode(model.generate(input_ids)[0], skip_special_tokens=True))

def win(commands):
    pyautogui.keyDown("win")
    for i in commands:
        pyautogui.press(str(i))
    pyautogui.keyUp("win")

def play_music():
    win([9, "s"])
    pyautogui.write("st cmus")
    pyautogui.press("enter")
    sleep(1)
    pyautogui.press("enter")
    win([1])
    speak("Okay, I'm playing your music.")

def pause_music():
    win([9])
    pyautogui.press("c")
    win([1])
    speak("I have paused your music.")

documents = [
        "Empty",
        "Play music",
        "Play my favorite music",
        "Play a playlist",
        "Pause my music",
        "Pause music",
        "Pause playing music"
]

stoplist = set('for a of the and to in'.split())
texts = [
        [word for word in document.lower().split() if word not in stoplist]
        for document in documents
]

frequency = defaultdict(int)
for text in texts:
    for token in text:
        frequency[token] += 1

texts = [
    [token for token in text if frequency[token] > 1]
    for text in texts
]

dictionary = corpora.Dictionary(texts)
corpus = [dictionary.doc2bow(text) for text in texts]

lsi = models.LsiModel(corpus, id2word=dictionary, num_topics=2)

doc = listen()
vec_bow = dictionary.doc2bow(doc.lower().split())
vec_lsi = lsi[vec_bow]

index = similarities.MatrixSimilarity(lsi[corpus])

index.save("stella.index")
index = similarities.MatrixSimilarity.load("stella.index")

sims = index[vec_lsi]

n = list(enumerate(sims))

n.sort(reverse=True, key=lambda x: x[1])

if n[0][0] in [1, 2, 3]:
    play_music()
elif n[0][0] in [4, 5, 6]:
    pause_music()
else:
    ai(doc)
