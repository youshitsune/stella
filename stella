#!/usr/bin/python3
import os
import sys
import random
from collections import defaultdict
from gensim import corpora
from gensim import models
from gensim import similarities
import pyautogui
from time import sleep

def win(commands):
    pyautogui.keyDown("win")
    for i in commands:
        pyautogui.press(str(i))
    pyautogui.keyUp("win")

def speak(text):
    os.system(f'flite -t "{text}" -voice slt')

def rick():
    with open("/home/luka/Science/rick.txt", "r") as f:
        rick = f.read().split(";")
    quote = random.choice(rick)
    speak(quote)

def play_music():
    win([9, "s"])
    pyautogui.write("st cmus")
    pyautogui.press("enter")
    sleep(1)
    pyautogui.press("enter")
    win([1])
    speak("Okay, I'm playing your music.")

def stop_music():
    win([9, "q", 1])
    speak("I have stoped playing your music.")

def list_projects_names():
    with open("projects.txt", "r") as f:
        projects = f.read().split(";")
    
    projects_names = []
    for i in projects:
        projects_names.append(i.split(":")[0])

    speak(f"Your projects are: {','.join(projects_names)}")

def list_projects_status():
    with open("projects.txt", "r") as f:
        projects = f.read().split(";")

    for i in range(len(projects)):
        name = projects[i].split(":")[0]
        status = projects[i].split(":")[1]

        projects[i] = f"{name} is {status}"

    speak(f"Statuses of your projects are: {','.join(projects)}")

documents = [
        "Play music",
        "Play my favorite music",
        "Play a playlist",
        "Tell me Rick stuff",
        "Rick",
        "Rick quotes",
        "List my projects",
        "Tell me mine projects",
        "Say me projects",
        "List project status",
        "Tell me project status",
        "Say me project status",
        "Stop my music",
        "Stop music",
        "Stop playing music"
]

stoplist = set('for a of the and to in'.split())
texts = [
        [word for word in document.lower().split() if word not in stoplist]
        for document in documents
]

frequency = defaultdict(int)
for text in texts:
    for token in text:
        frequency[token] += 1

texts = [
    [token for token in text if frequency[token] > 1]
    for text in texts
]

dictionary = corpora.Dictionary(texts)
corpus = [dictionary.doc2bow(text) for text in texts]

lsi = models.LsiModel(corpus, id2word=dictionary, num_topics=2)

doc = " ".join(sys.argv[1:])
vec_bow = dictionary.doc2bow(doc.lower().split())
vec_lsi = lsi[vec_bow]
print(vec_lsi)

index = similarities.MatrixSimilarity(lsi[corpus])

index.save("/home/luka/Projects/Stella/stella.index")
index = similarities.MatrixSimilarity.load("/home/luka/Projects/Stella/stella.index")

sims = index[vec_lsi]

n = list(enumerate(sims))

n.sort(reverse=True, key=lambda x: x[1])

if n[0][0] in [0, 1, 2]:
    play_music()
elif n[0][0] in [3,4,5]:
    rick()
elif n[0][0] in [6,7,8]:
    list_projects_names()
elif n[0][0] in [8,9,10]:
    list_projects_status()
elif n[0][0] in [11,12,13]:
    stop_music()
else:
    speak("I didn't understand.")
